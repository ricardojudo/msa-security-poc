package ricardojudo.opensaml;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.StringWriter;
import java.net.URLEncoder;
import java.util.Random;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.joda.time.DateTime;
import org.junit.BeforeClass;
import org.junit.Test;
import org.opensaml.Configuration;
import org.opensaml.DefaultBootstrap;
import org.opensaml.common.SAMLVersion;
import org.opensaml.saml2.core.AuthnRequest;
import org.opensaml.saml2.core.Issuer;
import org.opensaml.saml2.core.Response;
import org.opensaml.saml2.core.impl.AuthnRequestBuilder;
import org.opensaml.saml2.core.impl.IssuerBuilder;
import org.opensaml.xml.io.Marshaller;
import org.opensaml.xml.io.Unmarshaller;
import org.opensaml.xml.io.UnmarshallerFactory;
import org.opensaml.xml.util.Base64;
import org.opensaml.xml.util.XMLHelper;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class OpenSaml {
	
	@BeforeClass
	public static void setUp() throws Exception{
		DefaultBootstrap.bootstrap();
	}
	
	
	@Test
	public void ssoTest() throws Exception {
		
		Random random = new Random();
		String issuerId = "captcha-service";
		IssuerBuilder issuerBuilder = new IssuerBuilder();
		Issuer issuer = issuerBuilder.buildObject("urn:oasis:names:tc:SAML:2.0:assertion", "Issuer", "samlp");
		issuer.setValue(issuerId);
		
		
		String issuerUrl = "http://localhost:8080/saml/consumer";
		DateTime issueInstant = new DateTime();
		AuthnRequestBuilder authnRequestBuilder = new AuthnRequestBuilder();
		AuthnRequest authnRequest = authnRequestBuilder.buildObject("urn:oasis:names:tc:SAML:2.0:protocol", "AuthnRequest", "samlp");
		authnRequest.setForceAuthn(false);
		authnRequest.setIsPassive(false);
		authnRequest.setIssueInstant(issueInstant);
		authnRequest.setProtocolBinding("urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST");
		authnRequest.setAssertionConsumerServiceURL(issuerUrl);
		authnRequest.setIssuer(issuer);
		authnRequest.setID(String.valueOf(random.nextLong()));
		authnRequest.setVersion(SAMLVersion.VERSION_20);
		
		System.out.println(authnRequest);
		
		Marshaller marshaller = Configuration.getMarshallerFactory().getMarshaller(authnRequest);
		Element authDOM = marshaller.marshall(authnRequest);
		 
		StringWriter rspWrt = new StringWriter();
		XMLHelper.writeNode(authDOM, rspWrt);
		String requestMessage = rspWrt.toString();
		
		System.out.println(requestMessage);
		          
		Deflater deflater = new Deflater(Deflater.DEFLATED, true);
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteArrayOutputStream, deflater);
		deflaterOutputStream.write(requestMessage.getBytes());
		deflaterOutputStream.close();
		          
		/* Encoding the compressed message */
		String encodedRequestMessage = Base64.encodeBytes(byteArrayOutputStream.toByteArray(), Base64.DONT_BREAK_LINES);
		String encodedAuthnRequest = URLEncoder.encode(encodedRequestMessage,"UTF-8").trim();
		
		
		String identitypProviderUrl="https://localhost:9443/samlsso";
		String redirectionUrl = identitypProviderUrl+ "?SAMLRequest=" + encodedAuthnRequest;
		
		System.out.println(redirectionUrl);
		
		 
	}
	
	
	@Test
	public void response() throws Exception{
		
		
		
		String responseMessage="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBEZXN0aW5hdGlvbj0iaHR0cDovL2xvY2FsaG9zdDo4MDgwL3NhbWwvY29uc3VtZXIiIElEPSJfMjNkNTIzYmRmMzY3MmFlYWJjM2UyMWU4Mjg1NGU1MGUiIEluUmVzcG9uc2VUbz0iLTg1OTk5OTYyMzE0OTQ2MjM1MjkiIElzc3VlSW5zdGFudD0iMjAxOC0wNC0yMFQyMzowODozOS41NzFaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6ZW50aXR5IiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+bG9jYWxob3N0PC9zYW1sMjpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+CjxkczpSZWZlcmVuY2UgVVJJPSIjXzIzZDUyM2JkZjM2NzJhZWFiYzNlMjFlODI4NTRlNTBlIj4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+CjxkczpEaWdlc3RWYWx1ZT52UHNja29RaWFIUzVYOWFidWVsRHFNRDBKZTg9PC9kczpEaWdlc3RWYWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVlPgpBSi9pMmtGL1F4V1hVbGxDZHE1aStxN2FSMWVzb0FQSkE4RjFWcTA2by9vUUpaMFJpSktldnlEMXdNbFdONEtOVlhzN1gvc0hacldLCnVRV2VpUDEraG1mU1pQcWlSeVg3ZnVoUVh6em5vNmxvdE9pRDREa1JhemZhVGp3MldvUzJPVUtXSDJqS3hlTFlBVExFWlBlN04zSFQKaHlneldUVmRJYmZrNWxxRjA3NWZ2YUJZTGcwQnNURmp1SHU2NW9keCsyMkNqRUd5Q2p4S2pzVlVVbDJKbmhiMFpodlI2M1ZXV1hwYwpxV0V0QzVldnFZeENYQzNMNUx2QXIra1czeXN3Q0pGNHRRU0I0dDJpQWtoRlkwMklkR2N2c3RYMlZUc2FiaExxREZPUE9VYTJ2MHVtCjlyRVhWcUdsODhJdDg0aXBmcUlBay9ndCs3L01ScHpSZDFGZ05BPT0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPGRzOktleUluZm8+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJRFNUQ0NBakdnQXdJQkFnSUVBb0xRL1RBTkJna3Foa2lHOXcwQkFRc0ZBREJWTVFzd0NRWURWUVFHRXdKVlV6RUxNQWtHQTFVRQpDQk1DUTBFeEZqQVVCZ05WQkFjVERVMXZkVzUwWVdsdUlGWnBaWGN4RFRBTEJnTlZCQW9UQkZkVFR6SXhFakFRQmdOVkJBTVRDV3h2ClkyRnNhRzl6ZERBZUZ3MHhOekEzTVRrd05qVXlOVEZhRncweU56QTNNVGN3TmpVeU5URmFNRlV4Q3pBSkJnTlZCQVlUQWxWVE1Rc3cKQ1FZRFZRUUlFd0pEUVRFV01CUUdBMVVFQnhNTlRXOTFiblJoYVc0Z1ZtbGxkekVOTUFzR0ExVUVDaE1FVjFOUE1qRVNNQkFHQTFVRQpBeE1KYkc5allXeG9iM04wTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFsdVpGZFcxeW5pdHp0a1dMCkM2eEtlZ2JSV3hreSs1UDBwNFNoWUVPa0hzMzBRSTJWQ3VSNlFvNEJ6NXJUZ0xCcmt5MDNXMUdBVnJaeHV2S1JHajlWOStQbWpkR3QKYXU0Q1RYdTlwTExjcW5ydWFjem9TZHZCWUEzbFM5YTd6Z0ZVMCtzNmtNbDJFaEIrcms3Z1hsdUVlcDdsSU9lbnpmbDJmNklvVEthMgpmVmdWZDNZS2lTR3N5TDR0enRTNzB2bW1YMTIxcW0wc1RKZEtXUDRIeFh5cUs5bmVvbFhJOWZZeUhPWUlMVk5aNjl6LzczT09WaGtoCi9tdlRtV1pMTTdHTTZzQXBteUxYNk9YVXA4ejBwa1krdlQvOSt6Unh4UXM3R3VyQzQvQzFuSzNySS8weVNVZ0dFYWZPMWF0TmpZbWwKRk4rTTN0Wlg2bkVjQTZnOTRJYXZ5UUlEQVFBQm95RXdIekFkQmdOVkhRNEVGZ1FVdFM4a0lZeFE4VVZ2VnJaU2RneWlkZTlPSHhVdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmZrNW1xc1ZVcnBGQ1lUWlpoT3hUUlJwR1hxb1cxRzA1Yk94SHhzNDJQYXh3OHJBSjA2ClB0eTlqcU0xQ2dSUHBxdlphMmxQUUJRcVpySGtkREUwNnE0TkcwRHFNSDhOVCt0TmtYQmU5WVRyZTNFSkNTZnN2c3d0TFZEWjdHRHYKVEhLb2pKalF2ZFZDelJqNlhINVRydXdlZmI0Qkp6OUFQdG5seUpJdmpIazFoZG96cXlPbmlWWmQwUU94TEFiY2R0OTQ2Y2hOZFF2QwptNmFVT3B1dHA4WG9ncjBLQm5FeTNVOGVzMmNBZk5aYUVrUFU4VmE1YlU2WGpueTh6R1FuWENYeFBLcDdzTXBnTzkzblBCdC9saVgxCnFmeVhNN3hFb3RXb3htbTZIWng4b1dROFU1YWlYalo1UktEV0NDcTRadVhsNndWc1V6MWlFNjFzdU81eVdpOD08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDJwOlN0YXR1cz48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIElEPSJfN2IwZjFiYzE4NzU2OTQwZWFlOGMxYjQxZmNjMGZiMjYiIElzc3VlSW5zdGFudD0iMjAxOC0wNC0yMFQyMzowODozOS41NzFaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6SXNzdWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6ZW50aXR5Ij5sb2NhbGhvc3Q8L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8+CjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNfN2IwZjFiYzE4NzU2OTQwZWFlOGMxYjQxZmNjMGZiMjYiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4KPGRzOkRpZ2VzdFZhbHVlPk8zN1NQdVFHZ1YreCtTRjhxcG9OTnowWGMxZz08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWU+CkprbWRLMUo1d0dBWEdoeWFzSlFKRzRSblN2eHJkY2Nicm1aZG5yUlRlOEFwa3FhTUs4ZWR4UUx1ZkFSRFBsQ2RydXNPSmpodEIwREEKcXJTMExwenlTYUpsUlhRNWVKaEhCMVJsTCszVm56NGlJZW5XRWxJYU1UMkliWU9RS1J1cGpDcWhOUUpLU0JiNGVOT2lyN3dRd1Y5UAp0NUNxdE1xRWNIbHhaRGRPaThHM3F2UXpEZTJSaytiWjRyU3BlNHZsYnZ3WDh1aThhdzE4MkVJck82cHY4cFpxS3RBQUM5UFc4cVhJCmFtdDBOVWJyN0U4dDFLSSthRmR5RjlvNnlLeXRBbDBvb2NIN3hBejQwUFppK0tJaGdnRDV3Q0duL3hKczhlbEdHTnNPY2l6ZkphQWwKczJIQUVJbWFRaFArdDgvY2NYcWpRa3B5a1NiVXlrbTR6NkVidnc9PQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE+PGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEU1RDQ0FqR2dBd0lCQWdJRUFvTFEvVEFOQmdrcWhraUc5dzBCQVFzRkFEQlZNUXN3Q1FZRFZRUUdFd0pWVXpFTE1Ba0dBMVVFCkNCTUNRMEV4RmpBVUJnTlZCQWNURFUxdmRXNTBZV2x1SUZacFpYY3hEVEFMQmdOVkJBb1RCRmRUVHpJeEVqQVFCZ05WQkFNVENXeHYKWTJGc2FHOXpkREFlRncweE56QTNNVGt3TmpVeU5URmFGdzB5TnpBM01UY3dOalV5TlRGYU1GVXhDekFKQmdOVkJBWVRBbFZUTVFzdwpDUVlEVlFRSUV3SkRRVEVXTUJRR0ExVUVCeE1OVFc5MWJuUmhhVzRnVm1sbGR6RU5NQXNHQTFVRUNoTUVWMU5QTWpFU01CQUdBMVVFCkF4TUpiRzlqWVd4b2IzTjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQWx1WkZkVzF5bml0enRrV0wKQzZ4S2VnYlJXeGt5KzVQMHA0U2hZRU9rSHMzMFFJMlZDdVI2UW80Qno1clRnTEJya3kwM1cxR0FWclp4dXZLUkdqOVY5K1BtamRHdAphdTRDVFh1OXBMTGNxbnJ1YWN6b1NkdkJZQTNsUzlhN3pnRlUwK3M2a01sMkVoQityazdnWGx1RWVwN2xJT2VuemZsMmY2SW9US2EyCmZWZ1ZkM1lLaVNHc3lMNHR6dFM3MHZtbVgxMjFxbTBzVEpkS1dQNEh4WHlxSzluZW9sWEk5Zll5SE9ZSUxWTlo2OXovNzNPT1Zoa2gKL212VG1XWkxNN0dNNnNBcG15TFg2T1hVcDh6MHBrWSt2VC85K3pSeHhRczdHdXJDNC9DMW5LM3JJLzB5U1VnR0VhZk8xYXROalltbApGTitNM3RaWDZuRWNBNmc5NElhdnlRSURBUUFCb3lFd0h6QWRCZ05WSFE0RUZnUVV0UzhrSVl4UThVVnZWclpTZGd5aWRlOU9IeFV3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCZms1bXFzVlVycEZDWVRaWmhPeFRSUnBHWHFvVzFHMDViT3hIeHM0MlBheHc4ckFKMDYKUHR5OWpxTTFDZ1JQcHF2WmEybFBRQlFxWnJIa2RERTA2cTRORzBEcU1IOE5UK3ROa1hCZTlZVHJlM0VKQ1Nmc3Zzd3RMVkRaN0dEdgpUSEtvakpqUXZkVkN6Umo2WEg1VHJ1d2VmYjRCSno5QVB0bmx5Skl2akhrMWhkb3pxeU9uaVZaZDBRT3hMQWJjZHQ5NDZjaE5kUXZDCm02YVVPcHV0cDhYb2dyMEtCbkV5M1U4ZXMyY0FmTlphRWtQVThWYTViVTZYam55OHpHUW5YQ1h4UEtwN3NNcGdPOTNuUEJ0L2xpWDEKcWZ5WE03eEVvdFdveG1tNkhaeDhvV1E4VTVhaVhqWjVSS0RXQ0NxNFp1WGw2d1ZzVXoxaUU2MXN1TzV5V2k4PTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjE6bmFtZWlkLWZvcm1hdDplbWFpbEFkZHJlc3MiPmFkbWluPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSItODU5OTk5NjIzMTQ5NDYyMzUyOSIgTm90T25PckFmdGVyPSIyMDE4LTA0LTIwVDIzOjEzOjM5LjU3MVoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo4MDgwL3NhbWwvY29uc3VtZXIiLz48L3NhbWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxOC0wNC0yMFQyMzowODozOS41NzFaIiBOb3RPbk9yQWZ0ZXI9IjIwMTgtMDQtMjBUMjM6MTM6MzkuNTcxWiI+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1ZGllbmNlPmNhcHRjaGEtc2VydmljZTwvc2FtbDI6QXVkaWVuY2U+PC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDE4LTA0LTIwVDIzOjA4OjM5LjU3MVoiIFNlc3Npb25JbmRleD0iZTljZDg1MzctNDA3Yy00NWJjLWFmNTMtOGZjOWMwZTc5YTUxIj48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+PC9zYW1sMjpBdXRobkNvbnRleHQ+PC9zYW1sMjpBdXRoblN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4=";

		
		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
		documentBuilderFactory.setNamespaceAware(true);
		DocumentBuilder docBuilder = documentBuilderFactory.newDocumentBuilder();
		  
		byte[] base64DecodedResponse = Base64.decode(responseMessage);
		ByteArrayInputStream is = new ByteArrayInputStream(base64DecodedResponse);
		Document document = docBuilder.parse(is);
		Element element = document.getDocumentElement();
		UnmarshallerFactory unmarshallerFactory = Configuration.getUnmarshallerFactory();
		Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(element);
		Response response = (Response) unmarshaller.unmarshall(element);
		//The retrieved SAML 2.0 Response message can be easily processed. For example, lets takes the User Name or the Subject's Name Id.
		String subject = response.getAssertions().get(0).getSubject() .getNameID().getValue();
		
		System.out.println(subject);
		
	}
	
	
	 
}
